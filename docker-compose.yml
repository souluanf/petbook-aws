name: 'petbook-dynamodb-java'

networks:
  petbook-network:
    driver: bridge

volumes:
  localstack_data:
  prometheus_data:
  grafana_data:
  loki_data:

services:
  petbook-dynamodb:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    container_name: petbook-dynamodb
    ports:
      - "8080:8080"
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 700m
          cpus: '0.5'
    labels:
      logging: "promtail"
    networks:
      - petbook-network
    depends_on:
      localstack:
        condition: service_healthy
      mailhog:
        condition: service_healthy
      promtail:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/petbook/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 3

  localstack:
    env_file:
      .env
    container_name: localstack-main
    image: localstack/localstack:latest
    ports:
      - "4566:4566"
      - "4510-4559:4510-4559"
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
      SERVICES: ${LOCALSTACK_SERVICES}
      DEBUG: ${LOCALSTACK_DEBUG}
    volumes:
      - localstack_data:/var/lib/localstack
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - petbook-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 10s
      retries: 5

  aws-bootstrap:
    build:
      context: ./infra/aws
      dockerfile: aws-bootstrap.Dockerfile
    container_name: aws-bootstrap
    depends_on:
      localstack:
        condition: service_healthy
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION}
    networks:
      - petbook-network

  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - petbook-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8025"]
      interval: 10s
      timeout: 10s
      retries: 5

  prometheus:
    image: prom/prometheus:v2.51.2
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infra/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command: "--config.file=/etc/prometheus/prometheus.yml"
    networks:
      - petbook-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 10s
      retries: 5

  promtail:
    build:
      context: infra/promtail
      dockerfile: Dockerfile
    container_name: promtail
    volumes:
      - ./infra/promtail/promtail-docker-config.yml:/etc/promtail/docker-config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: "--config.file=/etc/promtail/docker-config.yml"
    networks:
      - petbook-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9080/ready"]
      interval: 10s
      timeout: 10s
      retries: 5

  loki:
    image: grafana/loki:3.0.0
    container_name: loki
    command: "-config.file=/etc/loki/local-config.yaml"
    ports:
      - "3100:3100"
    depends_on:
      promtail:
        condition: service_healthy
    networks:
      - petbook-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3100/ready"]
      interval: 10s
      timeout: 10s
      retries: 5

  tempo:
    image: grafana/tempo:2.4.1
    container_name: tempo
    command: "-config.file /etc/tempo-config.yml"
    ports:
      - "3200:3200"
      - "9411:9411"
    volumes:
      - ./infra/tempo/tempo.yml:/etc/tempo-config.yml
    networks:
      - petbook-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3200/ready"]
      interval: 10s
      timeout: 10s
      retries: 5

  grafana:
    image: grafana/grafana:10.4.2
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GF_SECURITY_ADMIN_USER}
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: ${GF_USERS_ALLOW_SIGN_UP}
    networks:
      - petbook-network
    depends_on:
      prometheus:
        condition: service_healthy
      loki:
        condition: service_healthy
      tempo:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 10s
      timeout: 10s
      retries: 5